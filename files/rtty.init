#!/bin/sh /etc/rc.common

USE_PROCD=1
START=99

BIN=/usr/sbin/rtty

validate_rtty_section() {
  uci_load_validate rtty rtty "$1" "$2" \
    'interface:uci("network", "@interface"):lan' \
    'id:maxlength(63)' \
    'description:maxlength(126)' \
    'password:maxlength(32)' \
    'onlyid:maxlength(32)' \
    'host:host' \
    'port:port' \
    'ssl:bool:0' \
    'insecure:bool:0' \
    'token:maxlength(32)' \
    'username:string' \
    'verbose:bool:0'
}

set_bypass_host() {
  local host="$1"
  local dnsFile="/etc/dnsmasq.d/domain_hicloud.conf"
  local thName="hi-th-host"
  local tableId=99999
  local markId=0x33a
  local gatewayIP=$(ip route show 1/0 | head -n1 | sed -e 's/^default//' | awk '{print $2}' | awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print $1"."$2"."$3"."$4}')
  if [ -z "$gatewayIP" ]; then
    (
      sleep 20
      set_bypass_host $host
    ) >/dev/null 2>&1 &
    echo "no gateway ip"
    return
  fi

  mkdir -p /etc/dnsmasq.d

  if [ -z "$(cat /etc/dnsmasq.conf | grep 'conf-dir=/etc/dnsmasq.d')" ]; then
      sed -i /conf-dir=/d /etc/dnsmasq.conf
      echo 'conf-dir=/etc/dnsmasq.d' >> /etc/dnsmasq.conf
  fi
  if [ -z "$(cat /etc/dnsmasq.conf | grep 'resolv-file=/etc/resolv.dnsmasq.conf')" ]; then
      sed -i /resolv-file=/d /etc/dnsmasq.conf
      echo 'resolv-file=/etc/resolv.dnsmasq.conf' >> /etc/dnsmasq.conf
  fi

  if [ ! -f "$dnsFile" ]; then
      touch $dnsFile
  fi

  iptables -t mangle -D OUTPUT -m set --match-set  ${thName} dst -j ACCEPT &> /dev/null
  iptables -t mangle -D OUTPUT -m set --match-set  ${thName} dst -j MARK --set-mark ${markId} &> /dev/null
  ipset destroy ${thName} &> /dev/null
  ip rule del fwmark ${markId} table ${tableId} &> /dev/null
  sed -i /#${thName}#/d /etc/dnsmasq.conf
  sed -i 's/,${thName},/,/g' ${dnsFile}
  sed -i 's/,${thName}$//g' ${dnsFile}
  sed -i 's/\/${thName},/\//g' ${dnsFile}
  sed -i '/\/${thName}$/d' ${dnsFile}

  ipset create ${thName} hash:net maxelem 1000000
  iptables -t mangle -I OUTPUT -m set --match-set  ${thName} dst -j ACCEPT
  iptables -t mangle -I OUTPUT -m set --match-set  ${thName} dst -j MARK --set-mark ${markId}

  cat > /etc/hotplug.d/iface/99-hi-bypass <<-EOF
#!/bin/sh
ip route flush table ${tableId}
route="\$(ip route)"
IFS_sav=\$IFS
IFS=\$'\n\n'
for line in \$route
do
IFS=\$IFS_sav
if [ ! -n "\$(echo "\$line"|grep -w -e tun0 -e wg0)" ];then
  ip route add \$line table ${tableId}
fi
IFS=\$'\n\n'
done
IFS=\$IFS_sav

gatewayIP=\$(ip route show 1/0 | head -n1 | sed -e 's/^default//' | awk '{print \$2}' | awk -F. '\$1<=255&&\$2<=255&&\$3<=255&&\$4<=255{print \$1"."\$2"."\$3"."\$4}')
if [ -n "\${gatewayIP}" ]; then
  cat > /etc/resolv.dnsmasq.conf <<-EOE
nameserver \${gatewayIP}
nameserver 8.8.8.8
nameserver 8.8.4.4
EOE
fi
EOF
  chmod +x /etc/hotplug.d/iface/99-hi-bypass
  /etc/hotplug.d/iface/99-hi-bypass

  ip rule add fwmark ${markId} table ${tableId} prio 50

  echo "server=/${host}/${gatewayIP} #${thName}#" >> /etc/dnsmasq.conf

  charA="$(cat ${dnsFile} | grep -n "ipset=/${host}/")"
  if [ -n "$charA" ]; then
    charB="$(echo "$charA" | grep -E "(/|,)${thName}(,|$)")"
    if [ -z "$charB" ]; then
      charC="$(echo "$charA" | awk -F ":" '{print $1}')"
      charD="$(echo "$charA" | awk -F ":" '{print $2}')"
      sed -i "${charC}d" ${dnsFile}
      echo "${charD},${thName}" >> ${dnsFile}
    fi
  else
      echo "ipset=/${host}/${thName}" >> ${dnsFile}
  fi
  /etc/init.d/dnsmasq restart
  nslookup "${host}" "127.0.0.1" > /dev/null 2>&1 &
}

start_rtty() {
  . /lib/functions/network.sh

  local ifname

  [ "$2" = 0 ] || {
    echo "validation failed" >&2
    return 1
  }

  [ -n "$interface" ] && network_get_device ifname "$interface"

  [ -z "$ifname" -a -z "$id" ] && {
    echo "You must specify an interface or ID" >&2
    return 1
  }

  [ -z "$host" ] && {
    echo "host required" >&2
    return 1
  }

  [ -z "$id" ] && {
    id=$(sed 's/://g' /sys/class/net/$ifname/address | tr 'a-z' 'A-Z')
  }

  [ -z "$onlyid" ] && {
    onlyid=$(date +%s)
    uci set rtty.general.onlyid="$onlyid"
    uci commit rtty
  }

  set_bypass_host "$host"

  procd_open_instance
  procd_set_param command $BIN -h $host -I "$id" -a
  [ -n "$port" ] && procd_append_param command -p "$port"
  [ -n "$description" ] && procd_append_param command -d "${onlyid}#${description}"
  [ -n "$password" ] && procd_append_param command -P "$password"
  [ "$ssl" = "1" ] && procd_append_param command -s
  [ "$insecure" = "1" ] && procd_append_param command -x
  [ -n "$token" ] && procd_append_param command -t "$token"
  [ -n "$username" ] && procd_append_param command -f "$username"
  [ "$verbose" = "1" ] && procd_append_param command -v
  procd_set_param respawn
  procd_close_instance
}

start_service() {
  config_load rtty
  config_foreach validate_rtty_section rtty start_rtty
}

service_triggers() {
  procd_add_reload_trigger "rtty"
  procd_add_validation validate_rtty_section
}
